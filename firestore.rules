rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isScorekeeper() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'scorekeeper';
    }
    
    function userTeamId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.teamId;
    }

    // Users can only read/write their own document
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Teams can be read by anyone authenticated. Only scorekeepers can create/update.
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow list: if isAuthenticated(); // Allow any authenticated user to list teams
      allow create: if isScorekeeper();
      allow update: if isScorekeeper() && resource.data.scorekeeperId == request.auth.uid;
    }

    // Scorekeepers can create games and list games for their own team.
    // Any authenticated user can read a specific game document.
    match /games/{gameId} {
      allow read: if isAuthenticated();
      allow list: if isScorekeeper() && request.query.where.get('teamId').string_value == userTeamId();
      allow create, update, delete: if isScorekeeper() && request.auth.uid == get(/databases/$(database)/documents/games/$(gameId)).data.createdBy;
      
      // Scores can be read by anyone, but only written by the game's creator.
      match /scores/{playerId} {
        allow read: if isAuthenticated();
        allow list: if isAuthenticated();
        allow create, update: if isScorekeeper() && request.auth.uid == get(/databases/$(database)/documents/games/$(gameId)).data.createdBy;
      }
    }
    
    // Chat channels can be read/written to by any authenticated user.
    match /channels/{channelId}/messages/{messageId} {
        allow read, create: if isAuthenticated();
    }
  }
}
