rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles and authentication status.
    function isAuthenticated() {
      return request.auth != null;
    }

    function isScorekeeper(userId) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(userId)).data.role == 'scorekeeper';
    }

    // Each user can only read and write their own document.
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Any authenticated user can read team data for leaderboards.
    // Only a scorekeeper can create a team, and they must assign themselves as the scorekeeper.
    match /teams/{teamId} {
      allow read: if isAuthenticated();
      allow create: if isScorekeeper(request.auth.uid) && request.resource.data.scorekeeperId == request.auth.uid;
      allow update, delete: if false; // Prevent modification after creation for data integrity.
    }

    // Rules for game documents.
    match /games/{gameId} {
      // Only a scorekeeper can create a new game document.
      allow create: if isScorekeeper(request.auth.uid) && request.resource.data.createdBy == request.auth.uid;
      
      // Only the scorekeeper who created the game can read or update it.
      allow read, update: if isScorekeeper(request.auth.uid) && get(/databases/$(database)/documents/games/$(gameId)).data.createdBy == request.auth.uid;
      
      allow delete: if false; // Games cannot be deleted.

      // Rules for the nested 'scores' subcollection within a game.
      match /scores/{playerId} {
        // Any authenticated user can read the scores (for spectator leaderboards).
        allow read: if isAuthenticated();
        
        // Only the scorekeeper who created the parent game can write scores.
        allow write: if isScorekeeper(request.auth.uid) && get(/databases/$(database)/documents/games/$(gameId)).data.createdBy == request.auth.uid;
      }
    }

    // Rules for the chat functionality.
    match /channels/{channelId}/messages/{messageId} {
      // Any authenticated user can read (list) messages in any channel.
      allow read: if isAuthenticated();
      
      // An authenticated user can only create messages as themselves.
      allow create: if isAuthenticated() && request.resource.data.senderId == request.auth.uid;
      
      allow update, delete: if false; // Messages are immutable.
    }
  }
}
